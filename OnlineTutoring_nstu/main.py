import telebot
from telebot import types
from text import main_text
import sqlite3

token = ''
bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.id == 777759367:
        db = sqlite3.connect("TutorsNstu.db")
        cursor = db.cursor()
        try:
            cursor.execute("""CREATE TABLE IF NOT EXISTS tutors(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            id_tg INTEGER UNIQUE,
            status INTEGER DEFAULT 0
            )""")
            db.commit()
            cursor.execute(f"INSERT INTO tutors (id_tg) VALUES ({message.chat.id})")
            db.commit()
            cursor.close()
            db.close()
            bot.send_message(message.chat.id,
                             '<code>–ü—Ä–∏–≤–µ—Ç</code>! –†–∞–¥—ã, —á—Ç–æ –≥–æ—Ç–æ–≤/-–∞ –ø–æ–º–æ—á—å üòä –ù–∞–ø–∏—à–∏ <b>!–≤—Ö–æ–¥</b>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ —Å–º–µ–Ω—É –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ü§Ø',
                             parse_mode='html')
            bot.register_next_step_handler(message, entry)
        except sqlite3.IntegrityError:
            cursor.close()
            db.close()
            bot.send_message(message.chat.id,
                             '<code>–ü—Ä–∏–≤–µ—Ç</code>! –†–∞–¥—ã, —á—Ç–æ –≥–æ—Ç–æ–≤/-–∞ –ø–æ–º–æ—á—å üòä –ù–∞–ø–∏—à–∏ <b>!–≤—Ö–æ–¥</b>, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ —Å–º–µ–Ω—É –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ü§Ø',
                             parse_mode='html')
            bot.register_next_step_handler(message, entry)
    else:
        db = sqlite3.connect("StudentsNstu.db")
        cursor = db.cursor()
        try:
            cursor.execute("""CREATE TABLE IF NOT EXISTS students(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            id_tg INTEGER UNIQUE,
            name VARCHAR,
            surname VARCHAR,
            number_curs INTEGER
            )""")
            db.commit()
            cursor.execute(f"INSERT INTO students (id_tg) VALUES ({message.chat.id})")
            db.commit()
            markup = types.InlineKeyboardMarkup()
            bt_1 = types.InlineKeyboardButton('–ì–æ—Ç–æ–≤(a)', callback_data='ready_now')
            markup.add(bt_1)
            bot.send_message(message.chat.id, f'{main_text}', reply_markup=markup, parse_mode='html')
            cursor.close()
            db.close()
        except sqlite3.IntegrityError:
            cursor.close()
            db.close()
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ—ë <b>–∏–º—è</b> üí¨', parse_mode='html')
            bot.register_next_step_handler(message, register)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data == 'ready_now':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data='registration')
        markup.add(bt_1)
        bot.send_message(call.message.chat.id,
                         '<code>–û—Ç–ª–∏—á–Ω–æ</code>! –†–∞–¥—ã, —á—Ç–æ —Ç—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω/-–∞ –≤ —ç—Ç–æ–º üòâ –°–µ–π—á–∞—Å –º—ã —Ç–µ–±—è <b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º</b> üë®üèª‚Äçüíª',
                         reply_markup=markup, parse_mode='html')
    elif call.data == 'registration':
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏ —Å–≤–æ—ë <b>–∏–º—è</b> üí¨', parse_mode='html')
        bot.register_next_step_handler(call.message, register)
    elif call.data == 'replace':
        bot.send_message(call.message.chat.id,
                         '<code>–°–µ–π—á–∞—Å –∑–∞–Ω–æ–≤–æ —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º</code> üìù\n–í–≤–µ–¥–∏ —Å–≤–æ—ë <b>–∏–º—è</b> üí¨',
                         parse_mode='html')
        bot.register_next_step_handler(call.message, register)
    elif call.data == 'good':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('1', callback_data='one')
        bt_2 = types.InlineKeyboardButton('2', callback_data='two')
        markup.add(bt_1, bt_2)
        bot.send_message(call.message, '<code>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</code> ‚úÖ\n–í—ã–±–µ—Ä–∏ <b>–∫—É—Ä—Å</b> 1Ô∏è‚É£ 2Ô∏è‚É£', parse_mode='html',
                         reply_markup=markup)
    elif call.data == 'one':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('–ú–∞—Ç–∞–Ω–∞–ª–∏–∑', callback_data='matanaliz_one')
        bt_2 = types.InlineKeyboardButton('–õ–∏–Ω–∞–ª', callback_data='linal_one')
        markup.add(bt_1, bt_2)
        bot.send_message(call.message, '–í—ã–±–µ—Ä–∏ <b>–ø—Ä–µ–¥–º–µ—Ç</b> üëá', parse_mode='html', reply_markup=markup)
    elif call.data == 'two':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('–ú–∞—Ç–∞–Ω–∞–ª–∏–∑', callback_data='matanaliz_two')
        bt_2 = types.InlineKeyboardButton('–õ–∏–Ω–∞–ª', callback_data='linal_two')
        markup.add(bt_1, bt_2)
        bot.send_message(call.message, '–í—ã–±–µ—Ä–∏ <b>–ø—Ä–µ–¥–º–µ—Ç</b> üëá', parse_mode='html', reply_markup=markup)
    elif call.data == 'matanaliz_one':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('–ö–æ–Ω—Å–ø–µ–∫—Ç—ã', callback_data='synopsis_mat_one')
        bt_2 = types.InlineKeyboardButton('–í–µ–±–∏–Ω–∞—Ä—ã', callback_data='vebs_mat_one')
        bt_3 = types.InlineKeyboardButton('–û–Ω–ª–∞–π–Ω-–ø–æ–º–æ—â—å', callback_data='online_help')
        bt_4 = types.InlineKeyboardButton('–ó–∞–¥–∞—á–∏', callback_data='tasks_mat_one')
        markup.add(bt_1, bt_2)
        markup.add(bt_3, bt_4)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—É—é <b>–ø–æ–º–æ—â—å</b> üÜò', parse_mode='html',
                         reply_markup=markup)
    elif call.data == 'linal_one':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('–ö–æ–Ω—Å–ø–µ–∫—Ç—ã', callback_data='synopsis_linal_one')
        bt_2 = types.InlineKeyboardButton('–í–µ–±–∏–Ω–∞—Ä—ã', callback_data='vebs_linal_one')
        bt_3 = types.InlineKeyboardButton('–û–Ω–ª–∞–π–Ω-–ø–æ–º–æ—â—å', callback_data='online_help')
        bt_4 = types.InlineKeyboardButton('–ó–∞–¥–∞—á–∏', callback_data='tasks_linal_one')
        markup.add(bt_1, bt_2)
        markup.add(bt_3, bt_4)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—É—é <b>–ø–æ–º–æ—â—å</b> üÜò', parse_mode='html',
                         reply_markup=markup)
    elif call.data == 'matanaliz_two':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('–ö–æ–Ω—Å–ø–µ–∫—Ç—ã', callback_data='synopsis_mat_two')
        bt_2 = types.InlineKeyboardButton('–í–µ–±–∏–Ω–∞—Ä—ã', callback_data='vebs_mat_two')
        bt_3 = types.InlineKeyboardButton('–û–Ω–ª–∞–π–Ω-–ø–æ–º–æ—â—å', callback_data='online_help')
        bt_4 = types.InlineKeyboardButton('–ó–∞–¥–∞—á–∏', callback_data='tasks_mat_two')
        markup.add(bt_1, bt_2)
        markup.add(bt_3, bt_4)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—É—é <b>–ø–æ–º–æ—â—å</b> üÜò', parse_mode='html',
                         reply_markup=markup)
    elif call.data == 'linal_two':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('–ö–æ–Ω—Å–ø–µ–∫—Ç—ã', callback_data='synopsis_linal_two')
        bt_2 = types.InlineKeyboardButton('–í–µ–±–∏–Ω–∞—Ä—ã', callback_data='vebs_linal_two')
        bt_3 = types.InlineKeyboardButton('–û–Ω–ª–∞–π–Ω-–ø–æ–º–æ—â—å', callback_data='online_help')
        bt_4 = types.InlineKeyboardButton('–ó–∞–¥–∞—á–∏', callback_data='tasks_linal_two')
        markup.add(bt_1, bt_2)
        markup.add(bt_3, bt_4)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—É—é <b>–ø–æ–º–æ—â—å</b> üÜò', parse_mode='html',
                         reply_markup=markup)
    elif call.data == 'synopsis_mat_one':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('–§—É–Ω–∫—Ü–∏–∏', callback_data='funcs')
        bt_2 = types.InlineKeyboardButton('–ü—Ä–µ–¥–µ–ª—ã', callback_data='predels')
        markup.add(bt_1, bt_2)
        bt_3 = types.InlineKeyboardButton('–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è', callback_data='proizvod')
        bt_4 = types.InlineKeyboardButton('–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã', callback_data='integrals')
        markup.add(bt_3, bt_4)
        bot.send_message(call.message, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é <b>—Ç–µ–º—É</b> üëá', parse_mode='html', reply_markup=markup)
    elif call.data == 'synopsis_linal_one':
        markup = types.InlineKeyboardMarkup()
        bt_1 = types.InlineKeyboardButton('–ú–∞—Ç—Ä–∏—Ü—ã', callback_data='matrix')
        bt_2 = types.InlineKeyboardButton('–§–°–£', callback_data='fsy')
        markup.add(bt_1, bt_2)
        bt_3 = types.InlineKeyboardButton('–í–µ–∫—Ç–æ—Ä–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞', callback_data='vectors')
        bt_4 = types.InlineKeyboardButton('–õ–∏–Ω–µ–π–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã', callback_data='linal_operator')
        markup.add(bt_3, bt_4)
        bt_5 = types.InlineKeyboardButton('–ö—Ä–∏–≤—ã–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞', callback_data='two_row')
        bt_6 = types.InlineKeyboardButton('–ï–≤–∫–ª–∏–¥–æ–≤–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', callback_data='evklid_space')
        markup.add(bt_5, bt_6)
        bot.send_message(call.message, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é <b>—Ç–µ–º—É</b> üëá', parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['text'])
def register(message):
    name = message.text
    db = sqlite3.connect("StudentsNstu.db")
    cursor = db.cursor()
    cursor.execute(f"UPDATE students SET name = '{name}' WHERE id_tg = {message.chat.id}")
    db.commit()
    cursor.execute(f"SELECT name FROM students WHERE id_tg = {message.chat.id}")
    name_proverka = cursor.fetchone()[0]
    bot.send_message(message.chat.id,
                     f'<code>–ü—Ä–∏–Ω—è—Ç–æ</code> ‚úÖ\n\n<b>–ò–º—è</b>: <code>{name_proverka}</code>\n–í–≤–µ–¥–∏ —Å–≤–æ—é <b>—Ñ–∞–º–∏–ª–∏—é</b> üí¨',
                     parse_mode='html')
    cursor.close()
    db.close()
    bot.register_next_step_handler(message, register_surname)


def register_surname(message):
    surname = message.text
    db = sqlite3.connect("StudentsNstu.db")
    cursor = db.cursor()
    cursor.execute(f"UPDATE students SET surname = '{surname}' WHERE id_tg = {message.chat.id}")
    db.commit()
    cursor.execute(f"SELECT surname FROM students WHERE id_tg = {message.chat.id}")
    surname_proverka = cursor.fetchone()[0]
    bot.send_message(message.chat.id,
                     f'<code>–ü—Ä–∏–Ω—è—Ç–æ</code> ‚úÖ\n\n<b>–§–∞–º–∏–ª–∏—è</b>: <code>{surname_proverka}</code>\n–í–≤–µ–¥–∏ —Å–≤–æ–π <b>–∫—É—Ä—Å</b> (—Ü–∏—Ñ—Ä—É!!!) üí¨',
                     parse_mode='html')
    cursor.close()
    db.close()
    bot.register_next_step_handler(message, register_curs)


def register_curs(message):
    curs = message.text
    db = sqlite3.connect("StudentsNstu.db")
    cursor = db.cursor()
    cursor.execute(f"UPDATE students SET number_curs = '{curs}' WHERE id_tg = {message.chat.id}")
    db.commit()
    cursor.execute(f"SELECT number_curs FROM students WHERE id_tg = {message.chat.id}")
    curs_proverka = cursor.fetchone()[0]
    bot.send_message(message.chat.id, f'<code>–ü—Ä–∏–Ω—è—Ç–æ</code> ‚úÖ\n\n<b>–ö—É—Ä—Å</b>: <code>{curs_proverka}</code>',
                     parse_mode='html')
    cursor.execute(f"SELECT name, surname, number_curs FROM students WHERE id_tg = {message.chat.id}")
    proverka = cursor.fetchone()
    markup = types.InlineKeyboardMarkup()
    bt_1 = types.InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data='good')
    bt_2 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='replace')
    markup.add(bt_1, bt_2)
    bot.send_message(message.chat.id,
                     f'<code>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ</code> ‚úÖ\n\n<b>–ò–º—è</b>: <code>{proverka[0]}</code>\n<b>–§–∞–º–∏–ª–∏—è</b>: <code>{proverka[1]}</code>\n<b>–ö—É—Ä—Å</b>: <code>{proverka[2]}</code>',
                     parse_mode='html', reply_markup=markup)
    cursor.close()
    db.close()


def entry(message):
    if message.text == '!–≤—Ö–æ–¥':
        db = sqlite3.connect("TutorsNstu.db")
        cursor = db.cursor()
        cursor.execute(f"UPDATE tutors SET status = 1 WHERE id_tg = {message.chat.id}")
        db.commit()
        cursor.close()
        db.close()
        bot.send_message(message.chat.id,
                         '<b>–¢—ã –≤—ã—à–µ–ª/-–∞ –Ω–∞ —Å–º–µ–Ω—É</b>! –£–¥–∞—á–∏ üçÄ\n–î–ª—è –≤—ã—Ö–æ–¥–∞ —Å–æ —Å–º–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É <b>!–≤—ã—Ö–æ–¥</b>',
                         parse_mode='html')
        bot.register_next_step_handler(message, exit)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚ùå –î–ª—è –≤—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É <b>!–≤—Ö–æ–¥</b>',
                         parse_mode='html')
        bot.register_next_step_handler(message, entry)


def exit(message):
    if message.text == '!–≤—ã—Ö–æ–¥':
        db = sqlite3.connect("TutorsNstu.db")
        cursor = db.cursor()
        cursor.execute(f"UPDATE tutors SET status = 0 WHERE id_tg = {message.chat.id}")
        db.commit()
        cursor.close()
        db.close()
        bot.send_message(message.chat.id,
                         '<b>–¢—ã –≤—ã—à–µ–ª/-–∞ —Å–æ —Å–º–µ–Ω—ã</b>! –î–æ –≤—Å—Ç—Ä–µ—á–∏ üëã\n–î–ª—è –≤—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É <b>!–≤—Ö–æ–¥</b>',
                         parse_mode='html')
        bot.register_next_step_handler(message, entry)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É <b>!–≤—ã—Ö–æ–¥</b>',
                         parse_mode='html')
        bot.register_next_step_handler(message, exit)


bot.infinity_polling()
